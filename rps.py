from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import datetime
from utils import load_users, check_private_chat, save_users, create_user, delete_message_later

# Game session storage
game_sessions = {}

def give_reward(player_id):
    users = load_users()
    print(users)

    if player_id in users:
        users[player_id]['free_spins'] += 3
    else:
        users = create_user(player_id)
        users[player_id]['free_spins'] += 3
    save_users(users)
    print(users, "\n",  users[player_id]['free_spins'])

def determine_winner(choice1, choice2):
    if choice1 == choice2:
        return None
    elif (choice1 == '–∫–∞–º–µ–Ω—å' and choice2 == '–Ω–æ–∂–Ω–∏—Ü—ã') or \
         (choice1 == '–Ω–æ–∂–Ω–∏—Ü—ã' and choice2 == '–±—É–º–∞–≥–∞') or \
         (choice1 == '–±—É–º–∞–≥–∞' and choice2 == '–∫–∞–º–µ–Ω—å'):
        return 'player1'
    else:
        return 'player2'

async def start_rps_handler(message: Message) -> None:
    if check_private_chat(message):
        await message.answer(f"–°–£–∫–∞ –∫—Ç–æ –ø–∏—à–µ—Ç –≤ –ª—Å —Ç–æ—Ç –ø–µ–¥–∏–∫ –µ–±–∞–Ω—ã–π")
        return
    if message.chat.id in game_sessions:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ!")
        return

    game_sessions[message.chat.id] = {'player1': message.from_user.id, 
                                      'player2': None, 
                                      'player1_choice': None, 
                                      'player2_choice': None,
                                      'player1_username': message.from_user.username,
                                      'player2_username': None}

    await message.answer(f"@{message.from_user.username} –Ω–∞—á–∞–ª –ö–ù–ë! –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤ - /rps_join.")
    

async def join_rps_handler(message: Message) -> None:
    if check_private_chat(message):
        await message.answer("–°–£–∫–∞ –∫—Ç–æ –ø–∏—à–µ—Ç –≤ –ª—Å —Ç–æ—Ç –ø–µ–¥–∏–∫ –µ–±–∞–Ω—ã–π")
        return
    session = game_sessions.get(message.chat.id)

    if not session:
        await message.answer("–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä! –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /rps_start")
        return

    if session['player2']:
        await message.answer("–í —ç—Ç–æ–π –∏–≥—Ä–µ —É–∂–µ 2 –∏–≥—Ä–æ–∫–∞!")
        return
    if message.from_user.id == session['player1']:
        await message.answer(f"@{message.from_user.username} —É–∂–µ –≤ –∏–≥—Ä–µ —Å—É–∫–∞!")
        return

    session['player2'] = message.from_user.id
    session['player2_username'] = message.from_user.username
    await message.answer(f"@{session['player2_username']} –≤–æ—à–µ–ª –≤ –∏–≥—Ä—É! –û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä.")

    # Send buttons to both players to make their choice
    choice_buttons = choice_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü™®", callback_data="rps_choice_–∫–∞–º–µ–Ω—å"),
            InlineKeyboardButton(text="‚úÇÔ∏è", callback_data="rps_choice_–Ω–æ–∂–Ω–∏—Ü—ã"),
            InlineKeyboardButton(text="üßª", callback_data="rps_choice_–±—É–º–∞–≥–∞")
        ]
    ])

    await message.answer(f"@{session['player1_username']} –∏ @{session['player2_username']}, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –±–ª—è", reply_markup=choice_buttons)

async def choice_rps_handler(message: Message) -> None:
    if check_private_chat(message):
        await message.answer(f"–°–£–∫–∞ –∫—Ç–æ –ø–∏—à–µ—Ç –≤ –ª—Å —Ç–æ—Ç –ø–µ–¥–∏–∫ –µ–±–∞–Ω—ã–π")
        return
    session = game_sessions.get(message.chat.id)

    if not session:
        await message.answer("–ù–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä! –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /rps_start")
        return

    player_id = message.from_user.id
    if player_id != session['player1'] and player_id != session['player2']:
        await message.answer("–í—ã –Ω–µ –∏–≥—Ä–æ–∫ —ç—Ç–æ–π –∏–≥—Ä—ã!")
        return
    if len(message.text.split()) < 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –±–ª—è—Ç—å –Ω–∞—Ö—É–π –±–ª—è—Ç—å, –Ω–∞–¥–æ - /rps_choice –∫–∞–º–µ–Ω—å | –Ω–æ–∂–Ω–∏—Ü—ã | –±—É–º–∞–≥–∞")
        return
    else:
        choice = message.text.split()[1].lower()
        
    if choice not in ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']:
        await message.answer("–ï–±–ª–∞–Ω?")
        return

    if player_id == session['player1']:
        session['player1_choice'] = choice
        await message.answer(f"@{session['player1_username']} –≤—ã–±—Ä–∞–ª!")
    elif player_id == session['player2']:
        session['player2_choice'] = choice
        await message.answer(f"@{session['player2_username']} –≤—ã–±—Ä–∞–ª!")

    if session['player1_choice'] and session['player2_choice']:
        winner = determine_winner(session['player1_choice'], session['player2_choice'])
        print(winner, session['player1_choice'], session['player2_choice'])
        if winner == 'player1':
            give_reward(session['player1'])
            await message.answer(f"@{session['player1_username']} –ø–æ–±–µ–¥–∏–ª, –∏ –ø–æ–ª—É—á–∞–µ—Ç 3 —Ñ—Ä–∏ —Å–ø–∏–Ω–∞!")
        elif winner == 'player2':
            give_reward(session['player2'])
            await message.answer(f"@{session['player2_username']} –ø–æ–±–µ–¥–∏–ª, –∏ –ø–æ–ª—É—á–∞–µ—Ç 3 —Ñ—Ä–∏ —Å–ø–∏–Ω–∞!")
        else:
            await message.answer("–ù–∏—á—å—è!")

        del game_sessions[message.chat.id]  # End the game session after the result
async def callback_rps_choice_handler(callback_query: CallbackQuery) -> None:
    session = game_sessions.get(callback_query.message.chat.id)
    player_id = callback_query.from_user.id

    if not session:
        await callback_query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä! –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /rps_start", show_alert=True)
        return

    if player_id != session['player1'] and player_id != session['player2']:
        await callback_query.answer("–¢—ã –Ω–µ –∏–≥—Ä–æ–∫ —ç—Ç–æ–π –∏–≥—Ä—ã!", show_alert=True)
        return

    choice = callback_query.data.split("_")[2]  # Extracting the choice from callback data

    if player_id == session['player1']:
        session['player1_choice'] = choice
        await callback_query.message.answer(f"@{session['player1_username']} –≤—ã–±—Ä–∞–ª!")
    elif player_id == session['player2']:
        session['player2_choice'] = choice
        await callback_query.message.answer(f"@{session['player2_username']} –≤—ã–±—Ä–∞–ª!")

    # Check if both players have made their choice
    if session['player1_choice'] and session['player2_choice']:
        winner = determine_winner(session['player1_choice'], session['player2_choice'])
        if winner == 'player1':
            give_reward(session['player1'])
            await callback_query.message.answer(f"@{session['player1_username']} –ø–æ–±–µ–¥–∏–ª, –∏ –ø–æ–ª—É—á–∞–µ—Ç 3 —Ñ—Ä–∏ —Å–ø–∏–Ω–∞!")
        elif winner == 'player2':
            give_reward(session['player2'])
            await callback_query.message.answer(f"@{session['player2_username']} –ø–æ–±–µ–¥–∏–ª, –∏ –ø–æ–ª—É—á–∞–µ—Ç 3 —Ñ—Ä–∏ —Å–ø–∏–Ω–∞!")
        else:
            await callback_query.message.answer("–ù–∏—á—å—è!")

        del game_sessions[callback_query.message.chat.id] 
    await callback_query.answer()  
async def cancel_rps_handler(message: Message) -> None:
    if check_private_chat(message):
        await message.answer(f"–°–£–∫–∞ –∫—Ç–æ –ø–∏—à–µ—Ç –≤ –ª—Å —Ç–æ—Ç –ø–µ–¥–∏–∫ –µ–±–∞–Ω—ã–π")
        return
    if message.chat.id in game_sessions:
        if game_sessions[message.chat.id]['player1'] == message.from_user.id or game_sessions[message.chat.id]['player2'] == message.from_user.id:
            del game_sessions[message.chat.id]
            await message.answer("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await message.answer("–í—ã –Ω–µ –∏–≥—Ä–æ–∫ —ç—Ç–æ–π –∏–≥—Ä—ã!")
    else:
        await message.answer("–ù–µ—Ç –∏–≥—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã")

# Function to register all handlers
def register_handlers_rps(dp: Dispatcher):
    dp.message.register(start_rps_handler, Command('rps_start'))
    dp.message.register(join_rps_handler, Command('rps_join'))
    dp.message.register(choice_rps_handler, Command('rps_choice'))
    dp.message.register(cancel_rps_handler, Command('rps_cancel'))
    dp.callback_query.register(callback_rps_choice_handler, lambda c: c.data and c.data.startswith("rps_choice_"))
